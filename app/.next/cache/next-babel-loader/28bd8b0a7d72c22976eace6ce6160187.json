{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"/home/truongduchuy910/apps/quangdacamera.com/app/components/Products.js\";\nvar __jsx = React.createElement;\nimport Link from \"next/link\";\nimport gql from \"graphql-tag\";\nimport React from \"react\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { Query, KeystoneProvider } from \"@keystonejs/apollo-helpers\";\nimport Head from \"next/head\";\nimport { Bootstrap, Grid, Row, Col } from \"react-bootstrap\";\nconst client = new ApolloClient({\n  link: new HttpLink({\n    uri: \"http://localhost:3000/admin/api\"\n  }),\n  cache: new InMemoryCache()\n});\nexport default function Products() {\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, __jsx(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }), __jsx(ApolloProvider, {\n    client: client,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, __jsx(KeystoneProvider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, __jsx(Query, {\n    query: gql`\n              query {\n                allProducts {\n                  title\n                }\n              }\n            `,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, ({\n    data\n  }) => __jsx(\"pre\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, _JSON$stringify(data))))));\n}","map":{"version":3,"sources":["/home/truongduchuy910/apps/quangdacamera.com/app/components/Products.js"],"names":["Link","gql","React","HttpLink","ApolloClient","InMemoryCache","ApolloProvider","Query","KeystoneProvider","Head","Bootstrap","Grid","Row","Col","client","link","uri","cache","Products","data"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,KAAT,EAAgBC,gBAAhB,QAAwC,4BAAxC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,GAA/B,QAA0C,iBAA1C;AACA,MAAMC,MAAM,GAAG,IAAIV,YAAJ,CAAiB;AAC9BW,EAAAA,IAAI,EAAE,IAAIZ,QAAJ,CAAa;AAAEa,IAAAA,GAAG,EAAE;AAAP,GAAb,CADwB;AAE9BC,EAAAA,KAAK,EAAE,IAAIZ,aAAJ;AAFuB,CAAjB,CAAf;AAKA,eAAe,SAASa,QAAT,GAAoB;AACjC,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,cAAD;AAAgB,IAAA,MAAM,EAAEJ,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AACE,IAAA,KAAK,EAAEb,GAAI;;;;;;aADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASG,CAAC;AAAEkB,IAAAA;AAAF,GAAD,KAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAM,gBAAeA,IAAf,CAAN,CATjB,CADF,CADF,CAFF,CADF;AAoBD","sourcesContent":["import Link from \"next/link\";\nimport gql from \"graphql-tag\";\nimport React from \"react\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { Query, KeystoneProvider } from \"@keystonejs/apollo-helpers\";\nimport Head from \"next/head\";\nimport { Bootstrap, Grid, Row, Col } from \"react-bootstrap\";\nconst client = new ApolloClient({\n  link: new HttpLink({ uri: \"http://localhost:3000/admin/api\" }),\n  cache: new InMemoryCache()\n});\n\nexport default function Products() {\n  return (\n    <div>\n      <Head></Head>\n      <ApolloProvider client={client}>\n        <KeystoneProvider>\n          <Query\n            query={gql`\n              query {\n                allProducts {\n                  title\n                }\n              }\n            `}\n          >\n            {({ data }) => <pre>{JSON.stringify(data)}</pre>}\n          </Query>\n        </KeystoneProvider>\n      </ApolloProvider>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}